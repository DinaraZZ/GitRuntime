Git - система контроля версий. Отслеживание изменений в проекте.
Консольный инструмент (программа).
Git Bash - терминал Гита.
Репозитория - папка, относительно которой отслеживаются изменения и хранится их историй. История может состоять из
множества записанных точек сохранения - commit.
Ветка - для работы несколькими разр-ками, отдельно взятое рабочее пространство со своей историей.
Инструмент для объединения веток - слияние.
Merge - слияние веток

ls -all         содержимое папки

git --version                   выводит версию установленной программы Гит
git status                      информация о состоянии репозитория
git init                        инициализирует новый (создание) репозиторий в папке, в которой терминал находится
rm -rf .git                     удаление папки Гита
git branch -M name              менять название ветки
git add <files>                 добавляет файл для его дальнейшей записи в ближайший коммит, будет сохранён в том виде, в
                                котором он был в момент вызова команды; след. изменения не будут в истории;
                                каждый раз, чтобы маркировать сохранения
git add .                       добавляет все файлы, которые указаны в статусе
git config user.name "name"     позволяют записать в конфигурацию репозитория имя
git config user.email "name"    и почту автора, который будет вносить изменения
git commit -m "message"         записывает в историю изменений новую точку сохранения с раннее сохр файлами
git commit --amend --author="name <email>" --no-edit        меняет имя и почту в последнем коммите
git branch -v                   список актуальных веток
git branch name                 создание новой ветки, история которой начинается с посл коммита текущей
git checkout name               переключиться на определённую ветку
git merge name                  сливает из name в текущую ветку
git branch -d name              удалить ветку


Файлы не нужны для записи в репозиторий. К таким файлам относятся различные локальные конфигурации (.idea,
*.iml, .vscode), результаты сборки проекта (папки build, target, out). Их нужно перечислить в файле .gitignore, чтобы
их игнорировали при командах

Варианты выполнения merge:
1) Fast-forward - все точки из name ветки напрямую переносятся в исходную. Для этого исходная ветка не должна уходить
вперёд от name.
2) Auto-merge - изменения в обоих ветках, но не в одинаковых, а в разных файлах.